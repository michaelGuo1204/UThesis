library(tidyverse)
library(corrplot)
library(viridis)
library(igraph)
library(aricode)
library(sbm)
library(missSBM)
library(reticulate)
use_python("/home/bili/anaconda3/envs/spektral/bin/python")
np <- import("numpy")
library(reticulate)
use_condaenv("r")
library(corrplot)
library(tidyverse)
library(corrplot)
library(viridis)
library(igraph)
library(aricode)
library(sbm)
library(missSBM)
library(reticulate)
use_condaenv("r")
library(tidyverse)
library(corrplot)
library(viridis)
library(igraph)
library(aricode)
library(sbm)
library(missSBM)
library(reticulate)
library(Matrix)
# Use conda environment
use_condaenv("r")
np <- import('numpy')
# load files
npz1 <- np$load("./GNN/Data/fsaj.npz")
setwd("~/Lernen/UThesis")
# Use conda environment
use_condaenv("r")
np <- import('numpy')
# load files
npz1 <- np$load("./GNN/Data/fsaj.npz")
npz1$files
arr <- npz1$f[["arr_0"]]
# Convert array to matrix
mat_from_file <- matrix(arr, nrow = 200, ncol = 200)
# Make igraph by this adjacency matrix
input_graph <- graph_from_adjacency_matrix(mat_from_file)
# Try blocks 1 to 20 and estimate the SBM model
blocks <- 1:20
estimation_result <- estimateMissSBM(as_adj(input_graph), blocks, "node")
# Plot overall training process
plot(estimation_result, "monitoring")
# Plot block selection progress
plot(estimation_result)
optimalmodel <- estimation_result$bestModel
# Extract identification into clusters
membership <- optimalmodel$fittedSBM$memberships
# The optimal SBM model
SBM <- optimalmodel$fittedSBM
plot(SBM, type = "expected")
plot(optimalmodel, "expected")
plot(optimalmodel, "imputed")
plot(optimalmodel, "meso")
# Net of clusters
cluster_net <- coef(optimalmodel, "connectivity")$mean
# Net of clusters
cluster_net <- coef(optimalmodel, "connectivity")
# Plot cluster nets
diag(cluster_net) <- 0
g_cluster <- graph_from_adjacency_matrix(cluster_net, mode = 'max', weighted = TRUE)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 20)
# Plot cluster nets
diag(cluster_net) <- 0
# Net of clusters
cluster_net <- matrix(coef(optimalmodel, "connectivity"))
# Net of clusters
cluster_net <- coef(optimalmodel, "connectivity")$num
# Net of clusters
cluster_net <- coef(optimalmodel, "connectivity")
View(cluster_net)
# Net of clusters
cluster_net <- coef(optimalmodel, "connectivity")
# Net of clusters
cluster_net <- coef(optimalmodel, "connectivity")$mean
# Plot cluster nets
diag(cluster_net) <- 0
g_cluster <- graph_from_adjacency_matrix(cluster_net, mode = 'max', weighted = TRUE)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 20)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 10)
View(cluster_net)
g_cluster <- graph_from_adjacency_matrix(cluster_net, weighted = TRUE)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 10)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5)
library(pheatmap)
pheatmap(cluster_net)
pheatmap(cluster_net,cluster_rows = FALSE,cluster_cols = False)
pheatmap(cluster_net,cluster_rows = FALSE,cluster_cols = FALSE)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5,arrow$size=1)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, arrow.size=1)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, arrow.size=0.5)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, arrow.size=0.1)
E(g_cluster)$arrow.size <- 1
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, edge.arrow.size=1)
g_cluster <- graph_from_adjacency_matrix(cluster_net, weighted = TRUE)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, edge.arrow.size=1)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, edge.arrow.size=10)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, edge.arrow.size=0/5)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, edge.arrow.size=0.5)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 5, edge.arrow.size=0.7)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 3, edge.arrow.size=0.7)
plot.igraph(g_cluster, edge.width = E(g_cluster)$weight * 4, edge.arrow.size=0.7)
save.image("~/Lernen/UThesis/R script/Rwork.RData")
